<p>{{#with package}}</p>
<h1 id="-name-">{`{name}`}</h1>
<p>Markdown generator for <a href="https://github.com/atom/atomdoc">atomdoc</a>.
Uses <a href="">donna</a> and <a href="">tello</a>.</p>
<p>See samples <a href="https://github.com/venkatperi/atomdoc-md-samples">here</a>.</p>
<p>#Installation
Install with <a href="https://www.npmjs.com/package/{`{name}`}">npm</a></p>
<pre><code>npm install {{#if preferGlobal}}-g{{/if}} {`{name}`}
</code></pre><p>#Examples</p>
<h2 id="generate-docs">Generate docs</h2>
<pre><code>atomdoc-md generate &lt;path to module&gt;
</code></pre><p>#Usage</p>
<h2 id="command-line">Command Line</h2>
<pre><code>atomdoc-md generate &lt;module&gt;

Options:
  --doc, -o    docs directory  [default: &quot;doc&quot;]
  --level, -l  log level  [choices: &quot;debug&quot;, &quot;verbose&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;] [default: &quot;info&quot;]
  --template   template name  [default: &quot;api&quot;]
  --meta       write donna (donna.json) and tello (tello.json) metadata to doc dir
  --name, -n   generated file name  [default: &quot;api.md&quot;]
</code></pre><h2 id="from-node">From Node</h2>
<pre><code class="lang-coffeescript">AtomdocMD = require &#39;atomdoc-md&#39;

generator = new AtomdocMD( options );
generator.generateMarkdown()
</code></pre>
<h2 id="generate-readme-md-">Generate <code>README.md</code></h2>
<pre><code># From the project&#39;s root

atomdoc-md generate -o . -n README.md .
</code></pre><h2 id="importing-files">Importing Files</h2>
<p>The default template <code>api</code> will include files <code>intro.md</code> and <code>appendix.md</code> into the output.
The files must be located in the <code>--doc</code> docs directory.</p>
<p>{{/with}}</p>


# <a name='classes'>API</a>

Class |  Summary
------| ------------
<code>[MarkdownGenerator](#class-MarkdownGenerator)</code> | Generates markdown from atomdoc/tello's metadata


### <a name="class-MarkdownGenerator">MarkdownGenerator</a><b><sub><sup><code>CLASS </code></sup></sub></b><a href="#classes"><img src="https://cdn.jsdelivr.net/gh/venkatperi/atomdoc-md/assets/octicons/arrow-up.svg" alt="Back to Class List" height= "18px"></a>

<p>Generates markdown from atomdoc/tello&#39;s metadata</p>


<table width="100%">
  <tr>
    <td colspan="4"><h4>Methods</h4></td>
  </tr>
  
  <tr>
    <td><code>:: <b>constructor(</b> opt <b>)</b></code></td>
    <td width="8%" align="center"><sub>public</sub></td>
    <td width="8%" align="center"><sub>instance</sub></td>
    <td width="8%" align="center"><sub><a href="#class-MarkdownGenerator">MarkdownGenerator</a></sub></td>
  </tr>
  <tr>
    <td colspan="4">
      <ul>
  <li><code>opt</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">Object</a> Options<ul>
  <li><code>opt.api</code> is an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object">Object</a> with <code>tello</code> api metadata.</li>
  <li><code>opt.path</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> path to file with <code>tello</code> api info</li>
  <li><code>opt.docdir</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> dir to write the output to. Also looks for files to import (e.g. <code>intro.md</code>).</li>
  <li><code>opt.template</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> name of the template to use</li>
  <li><code>opt.templatePath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> alternatively, path to template dir</li>
  <li><code>opt.modulePath</code> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> path to the module (for package.json) </li>
  </ul>
  </li>
  </ul>
  
      <p>Create a new markdown generator</p>
  
      
    </td>
  </tr>
  
  <tr>
    <td><code>:: <b>generateMarkdown(</b>  <b>)</b></code></td>
    <td width="8%" align="center"><sub>public</sub></td>
    <td width="8%" align="center"><sub>instance</sub></td>
    <td width="8%" align="center"><sub><a href="#class-MarkdownGenerator">MarkdownGenerator</a></sub></td>
  </tr>
  <tr>
    <td colspan="4">
      
      <p>Writes markdown to the output file.</p>
  
      <p>  <em>Returns</em></p>
  <ul>
  <li>Returns a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> which resolves with the generated
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> when done.</li>
  </ul>
  
    </td>
  </tr>
  
</table>




<br>
<sub>Markdown generated by [atomdoc-md](https://github.com/venkatperi/atomdoc-md).</sub>
